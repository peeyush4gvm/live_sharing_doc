<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Real-time Document Editor</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        #document-form {
            margin-bottom: 20px;
        }
        #message-popup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #f0f0f0;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
        #active-users-list {
            margin-top: 20px;
        }
        /* Style for unauthorized message */
        #unauthorized-message {
            color: red;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <form id="document-form">
        <label for="document-title">Document Title:</label>
        <input type="text" id="document-title" placeholder="Enter document title" required>
        <input type="hidden" id="current-document-id">
        <br>
        <label for="document-content">Document Content:</label>
        <textarea id="document-content" placeholder="Enter document content" rows="4" required></textarea>
       
        <button type="button" id="create-document-btn">Create Document</button>
    </form>

    <ul id="document-list"></ul>

    <div id="document-content-display">
        <h2 id="document-title-display"></h2>
        <p id="document-content-display"></p>
        <button type="button" id="download-document-btn" style="display: none;">Download PDF</button>
    </div>

    <div id="active-users-list">
        <h3>Active Users</h3>
        <ul id="active-users"></ul>
    </div>

    <!-- Unauthorized message -->
    <div id="message-popup"></div>
    <div id="unauthorized-message"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.3/socket.io.js"></script>
    <script>
        const urlParams = new URLSearchParams(window.location.search);
        const userId = urlParams.get('userId');
        const socket = io({ query: { userId } });

        const documentList = document.getElementById('document-list');
        const documentTitleInput = document.getElementById('document-title');
        const documentContentInput = document.getElementById('document-content');
        const currentDocumentIdInput = document.getElementById('current-document-id');
        const activeUsersList = document.getElementById('active-users');

        // Set to store active user IDs
        const activeUserIds = new Set();

        // Update active users list
        socket.on('active-users', ({ activeUsers }) => {
            activeUserIds.clear();
            activeUsers.forEach(user => activeUserIds.add(user));
            renderActiveUsers();
        });

        // Remove user from active users list when leaving a document
        socket.on('leave-document', ({ userId }) => {
            activeUserIds.delete(userId);
            renderActiveUsers();
        });

        // Render active users list
        function renderActiveUsers() {
            activeUsersList.innerHTML = [...activeUserIds].map(user => `<li>${user}</li>`).join('');
        }

        // Populate document list
        socket.on('all-documents', (documents) => {
            documentList.innerHTML = documents.map(doc => `<li><a href="#" data-id="${doc._id}">${doc.title}</a></li>`).join('');
        });

        // Create a new document
        document.getElementById('create-document-btn').addEventListener('click', createDocument);

        function createDocument() {
            const title = documentTitleInput.value;
            const content = documentContentInput.value;
            socket.emit('create-document', { title, content, userId }, (error) => {
                if (error) console.error('Error creating document:', error);
            });
        }

        // Handle document selection
        documentList.addEventListener('click', (event) => {
            if (event.target.tagName === 'A') {
                const documentId = event.target.dataset.id;
                const documentTitle = event.target.textContent;
                loadDocument(documentId, documentTitle);
                socket.emit('join-document', { documentId });
            }
        });

        // Load document content
        function loadDocument(documentId, documentTitle) {
            if (documentId !== currentDocumentIdInput.value) {
                socket.emit('get-document-content', { documentId, documentTitle, userId });
                currentDocumentIdInput.value = documentId;
            }
        }

        // Update document content
        documentContentInput.addEventListener('input', () => {
            const documentId = currentDocumentIdInput.value;
            const content = documentContentInput.value;
            if (documentId) socket.emit('update-document', { documentId, content });
        });

        // Handle document content updates
        socket.on('document-content', ({ id, title, content }) => {
            documentTitleInput.value = title;
            documentContentInput.value = content;
            currentDocumentIdInput.value = id;
            document.getElementById('document-title-display').textContent = title;
            document.getElementById('document-content-display').textContent = content;
            document.getElementById('download-document-btn').setAttribute('onclick', `downloadDocument('${id}', '${title}')`);
            document.getElementById('download-document-btn').style.display = 'block';
        });

        // Handle document creation
        socket.on('document-created', (data) => {
            const listItem = document.createElement('li');
            const link = document.createElement('a');
            link.href = '#';
            link.textContent = data.title;
            link.dataset.id = data.id;
            listItem.appendChild(link);
            documentList.appendChild(listItem);
            loadDocument(data.id, data.title);
        });

        // Handle document updates
        socket.on('document-updated', ({ title, content }) => {
            document.getElementById('document-title-display').textContent = title;
            document.getElementById('document-content-display').textContent = content;
        });

        // Handle unauthorized access
        socket.on('unauthorized', ({ message }) => {
            console.error('Unauthorized access:', message);
            const messagePopup = document.getElementById('message-popup');
            messagePopup.innerHTML = `<p>${message}</p>`;
            messagePopup.style.display = 'block';
            const unauthorizedMessage = document.getElementById('unauthorized-message');
            unauthorizedMessage.textContent = message;
            unauthorizedMessage.style.display = 'block';
            documentContentInput.disabled = true;
            setTimeout(() => {
                messagePopup.style.display = 'none';
                unauthorizedMessage.textContent = '';
                unauthorizedMessage.style.display = 'none';
                documentContentInput.disabled = false;
            }, 3000);
        });
        

        // Download PDF document
        function downloadDocument(documentId, documentTitle) {
            fetch(`/document/download-pdf/${documentId}`)
                .then(response => {
                    if (!response.ok) throw new Error('Failed to download PDF');
                    return response.blob();
                })
                .then(blob => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `${documentTitle}.pdf`;
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);
                })
                .catch(error => {
                    console.error('Error downloading PDF:', error);
                });
        }
    </script>
</body>
</html>
